/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.hive.service.cli.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-8-14")
public class TEnColumn implements org.apache.thrift.TBase<TEnColumn, TEnColumn._Fields>, java.io.Serializable, Cloneable, Comparable<TEnColumn> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TEnColumn");

  private static final org.apache.thrift.protocol.TField EN_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("enData", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField NULLS_FIELD_DESC = new org.apache.thrift.protocol.TField("nulls", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("size", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField COMPRESSOR_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("compressorName", org.apache.thrift.protocol.TType.STRING, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TEnColumnStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TEnColumnTupleSchemeFactory());
  }

  private ByteBuffer enData; // required
  private ByteBuffer nulls; // required
  private TTypeId type; // required
  private int size; // required
  private String compressorName; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    EN_DATA((short)1, "enData"),
    NULLS((short)2, "nulls"),
    /**
     * 
     * @see TTypeId
     */
    TYPE((short)3, "type"),
    SIZE((short)4, "size"),
    COMPRESSOR_NAME((short)5, "compressorName");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // EN_DATA
          return EN_DATA;
        case 2: // NULLS
          return NULLS;
        case 3: // TYPE
          return TYPE;
        case 4: // SIZE
          return SIZE;
        case 5: // COMPRESSOR_NAME
          return COMPRESSOR_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SIZE_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.EN_DATA, new org.apache.thrift.meta_data.FieldMetaData("enData", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.NULLS, new org.apache.thrift.meta_data.FieldMetaData("nulls", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TTypeId.class)));
    tmpMap.put(_Fields.SIZE, new org.apache.thrift.meta_data.FieldMetaData("size", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COMPRESSOR_NAME, new org.apache.thrift.meta_data.FieldMetaData("compressorName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TEnColumn.class, metaDataMap);
  }

  public TEnColumn() {
  }

  public TEnColumn(
    ByteBuffer enData,
    ByteBuffer nulls,
    TTypeId type,
    int size,
    String compressorName)
  {
    this();
    this.enData = org.apache.thrift.TBaseHelper.copyBinary(enData);
    this.nulls = org.apache.thrift.TBaseHelper.copyBinary(nulls);
    this.type = type;
    this.size = size;
    setSizeIsSet(true);
    this.compressorName = compressorName;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TEnColumn(TEnColumn other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetEnData()) {
      this.enData = org.apache.thrift.TBaseHelper.copyBinary(other.enData);
    }
    if (other.isSetNulls()) {
      this.nulls = org.apache.thrift.TBaseHelper.copyBinary(other.nulls);
    }
    if (other.isSetType()) {
      this.type = other.type;
    }
    this.size = other.size;
    if (other.isSetCompressorName()) {
      this.compressorName = other.compressorName;
    }
  }

  public TEnColumn deepCopy() {
    return new TEnColumn(this);
  }

  @Override
  public void clear() {
    this.enData = null;
    this.nulls = null;
    this.type = null;
    setSizeIsSet(false);
    this.size = 0;
    this.compressorName = null;
  }

  public byte[] getEnData() {
    setEnData(org.apache.thrift.TBaseHelper.rightSize(enData));
    return enData == null ? null : enData.array();
  }

  public ByteBuffer bufferForEnData() {
    return org.apache.thrift.TBaseHelper.copyBinary(enData);
  }

  public void setEnData(byte[] enData) {
    this.enData = enData == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(enData, enData.length));
  }

  public void setEnData(ByteBuffer enData) {
    this.enData = org.apache.thrift.TBaseHelper.copyBinary(enData);
  }

  public void unsetEnData() {
    this.enData = null;
  }

  /** Returns true if field enData is set (has been assigned a value) and false otherwise */
  public boolean isSetEnData() {
    return this.enData != null;
  }

  public void setEnDataIsSet(boolean value) {
    if (!value) {
      this.enData = null;
    }
  }

  public byte[] getNulls() {
    setNulls(org.apache.thrift.TBaseHelper.rightSize(nulls));
    return nulls == null ? null : nulls.array();
  }

  public ByteBuffer bufferForNulls() {
    return org.apache.thrift.TBaseHelper.copyBinary(nulls);
  }

  public void setNulls(byte[] nulls) {
    this.nulls = nulls == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(nulls, nulls.length));
  }

  public void setNulls(ByteBuffer nulls) {
    this.nulls = org.apache.thrift.TBaseHelper.copyBinary(nulls);
  }

  public void unsetNulls() {
    this.nulls = null;
  }

  /** Returns true if field nulls is set (has been assigned a value) and false otherwise */
  public boolean isSetNulls() {
    return this.nulls != null;
  }

  public void setNullsIsSet(boolean value) {
    if (!value) {
      this.nulls = null;
    }
  }

  /**
   * 
   * @see TTypeId
   */
  public TTypeId getType() {
    return this.type;
  }

  /**
   * 
   * @see TTypeId
   */
  public void setType(TTypeId type) {
    this.type = type;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public int getSize() {
    return this.size;
  }

  public void setSize(int size) {
    this.size = size;
    setSizeIsSet(true);
  }

  public void unsetSize() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SIZE_ISSET_ID);
  }

  /** Returns true if field size is set (has been assigned a value) and false otherwise */
  public boolean isSetSize() {
    return EncodingUtils.testBit(__isset_bitfield, __SIZE_ISSET_ID);
  }

  public void setSizeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SIZE_ISSET_ID, value);
  }

  public String getCompressorName() {
    return this.compressorName;
  }

  public void setCompressorName(String compressorName) {
    this.compressorName = compressorName;
  }

  public void unsetCompressorName() {
    this.compressorName = null;
  }

  /** Returns true if field compressorName is set (has been assigned a value) and false otherwise */
  public boolean isSetCompressorName() {
    return this.compressorName != null;
  }

  public void setCompressorNameIsSet(boolean value) {
    if (!value) {
      this.compressorName = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case EN_DATA:
      if (value == null) {
        unsetEnData();
      } else {
        setEnData((ByteBuffer)value);
      }
      break;

    case NULLS:
      if (value == null) {
        unsetNulls();
      } else {
        setNulls((ByteBuffer)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((TTypeId)value);
      }
      break;

    case SIZE:
      if (value == null) {
        unsetSize();
      } else {
        setSize((Integer)value);
      }
      break;

    case COMPRESSOR_NAME:
      if (value == null) {
        unsetCompressorName();
      } else {
        setCompressorName((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case EN_DATA:
      return getEnData();

    case NULLS:
      return getNulls();

    case TYPE:
      return getType();

    case SIZE:
      return Integer.valueOf(getSize());

    case COMPRESSOR_NAME:
      return getCompressorName();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case EN_DATA:
      return isSetEnData();
    case NULLS:
      return isSetNulls();
    case TYPE:
      return isSetType();
    case SIZE:
      return isSetSize();
    case COMPRESSOR_NAME:
      return isSetCompressorName();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TEnColumn)
      return this.equals((TEnColumn)that);
    return false;
  }

  public boolean equals(TEnColumn that) {
    if (that == null)
      return false;

    boolean this_present_enData = true && this.isSetEnData();
    boolean that_present_enData = true && that.isSetEnData();
    if (this_present_enData || that_present_enData) {
      if (!(this_present_enData && that_present_enData))
        return false;
      if (!this.enData.equals(that.enData))
        return false;
    }

    boolean this_present_nulls = true && this.isSetNulls();
    boolean that_present_nulls = true && that.isSetNulls();
    if (this_present_nulls || that_present_nulls) {
      if (!(this_present_nulls && that_present_nulls))
        return false;
      if (!this.nulls.equals(that.nulls))
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_size = true;
    boolean that_present_size = true;
    if (this_present_size || that_present_size) {
      if (!(this_present_size && that_present_size))
        return false;
      if (this.size != that.size)
        return false;
    }

    boolean this_present_compressorName = true && this.isSetCompressorName();
    boolean that_present_compressorName = true && that.isSetCompressorName();
    if (this_present_compressorName || that_present_compressorName) {
      if (!(this_present_compressorName && that_present_compressorName))
        return false;
      if (!this.compressorName.equals(that.compressorName))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_enData = true && (isSetEnData());
    list.add(present_enData);
    if (present_enData)
      list.add(enData);

    boolean present_nulls = true && (isSetNulls());
    list.add(present_nulls);
    if (present_nulls)
      list.add(nulls);

    boolean present_type = true && (isSetType());
    list.add(present_type);
    if (present_type)
      list.add(type.getValue());

    boolean present_size = true;
    list.add(present_size);
    if (present_size)
      list.add(size);

    boolean present_compressorName = true && (isSetCompressorName());
    list.add(present_compressorName);
    if (present_compressorName)
      list.add(compressorName);

    return list.hashCode();
  }

  @Override
  public int compareTo(TEnColumn other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetEnData()).compareTo(other.isSetEnData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enData, other.enData);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNulls()).compareTo(other.isSetNulls());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNulls()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nulls, other.nulls);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSize()).compareTo(other.isSetSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.size, other.size);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompressorName()).compareTo(other.isSetCompressorName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompressorName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.compressorName, other.compressorName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TEnColumn(");
    boolean first = true;

    sb.append("enData:");
    if (this.enData == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.enData, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("nulls:");
    if (this.nulls == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.nulls, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("size:");
    sb.append(this.size);
    first = false;
    if (!first) sb.append(", ");
    sb.append("compressorName:");
    if (this.compressorName == null) {
      sb.append("null");
    } else {
      sb.append(this.compressorName);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSetEnData()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'enData' is unset! Struct:" + toString());
    }

    if (!isSetNulls()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'nulls' is unset! Struct:" + toString());
    }

    if (!isSetType()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'type' is unset! Struct:" + toString());
    }

    if (!isSetSize()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'size' is unset! Struct:" + toString());
    }

    if (!isSetCompressorName()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'compressorName' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TEnColumnStandardSchemeFactory implements SchemeFactory {
    public TEnColumnStandardScheme getScheme() {
      return new TEnColumnStandardScheme();
    }
  }

  private static class TEnColumnStandardScheme extends StandardScheme<TEnColumn> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TEnColumn struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // EN_DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.enData = iprot.readBinary();
              struct.setEnDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NULLS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nulls = iprot.readBinary();
              struct.setNullsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = org.apache.hive.service.cli.thrift.TTypeId.findByValue(iprot.readI32());
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.size = iprot.readI32();
              struct.setSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // COMPRESSOR_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.compressorName = iprot.readString();
              struct.setCompressorNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TEnColumn struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.enData != null) {
        oprot.writeFieldBegin(EN_DATA_FIELD_DESC);
        oprot.writeBinary(struct.enData);
        oprot.writeFieldEnd();
      }
      if (struct.nulls != null) {
        oprot.writeFieldBegin(NULLS_FIELD_DESC);
        oprot.writeBinary(struct.nulls);
        oprot.writeFieldEnd();
      }
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.type.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SIZE_FIELD_DESC);
      oprot.writeI32(struct.size);
      oprot.writeFieldEnd();
      if (struct.compressorName != null) {
        oprot.writeFieldBegin(COMPRESSOR_NAME_FIELD_DESC);
        oprot.writeString(struct.compressorName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TEnColumnTupleSchemeFactory implements SchemeFactory {
    public TEnColumnTupleScheme getScheme() {
      return new TEnColumnTupleScheme();
    }
  }

  private static class TEnColumnTupleScheme extends TupleScheme<TEnColumn> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TEnColumn struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeBinary(struct.enData);
      oprot.writeBinary(struct.nulls);
      oprot.writeI32(struct.type.getValue());
      oprot.writeI32(struct.size);
      oprot.writeString(struct.compressorName);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TEnColumn struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.enData = iprot.readBinary();
      struct.setEnDataIsSet(true);
      struct.nulls = iprot.readBinary();
      struct.setNullsIsSet(true);
      struct.type = org.apache.hive.service.cli.thrift.TTypeId.findByValue(iprot.readI32());
      struct.setTypeIsSet(true);
      struct.size = iprot.readI32();
      struct.setSizeIsSet(true);
      struct.compressorName = iprot.readString();
      struct.setCompressorNameIsSet(true);
    }
  }

}

